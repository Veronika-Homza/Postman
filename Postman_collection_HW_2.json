{
	"info": {
		"_postman_id": "e0e5274a-98a2-459a-9ef0-ec97d7f3827b",
		"name": "Postman HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20928324"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"// 3. Проверить, что в body приходит правильный string",
							"",
							"",
							"pm.test(\"Body has correct string\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"// 3. Спарсить response body в json",
							"const jsonData = pm.response.json();",
							"",
							"// 4. Проверить, что name в ответе равно name в request (name вбить руками.)",
							"pm.test(\"'resp_name' is equal to 'req_name'\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Veronika\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age в request (age вбить руками.)",
							"pm.test(\"'resp_age' is equal to 'req_age'\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"25\");",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary в request (salary вбить руками.) ",
							"pm.test(\"'resp_salary' is equal to 'req_salary'\", function () {",
							"    pm.expect(jsonData.salary).to.eql(1500);",
							"});",
							"",
							"// 7. Спарсить request",
							"const req = request.data;",
							"let reqName = req.name;",
							"let reqAge = req.age;",
							"let reqSalary = req.salary;",
							"",
							"// 8. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"pm.test(\"'respName' is equal to 'reqName'\", function () {",
							"    pm.expect(jsonData.name).to.eql(reqName);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age в request (age забрать из request.)",
							"pm.test(\"'respAge' is equal to 'reqAge'\", function () {",
							"    pm.expect(jsonData.age).to.eql(reqAge);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary в request (salary забрать из request.)",
							"pm.test(\"'respSalary' ia equal to 'reqSalary'\", function () {",
							"    pm.expect(jsonData.salary).to.eql(Number(reqSalary));",
							"});",
							"",
							"// 11. Вывести в консоль параметр family из response",
							"let respFamily = jsonData.family;",
							"console.log(respFamily);",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"let respSalary_1_5 = reqSalary * 4;",
							"pm.test(\"'u_salary_1_5_year' is equal to 'salary*4'\", function () {",
							"    pm.expect(respSalary_1_5).to.eql(reqSalary * 4);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Veronika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"// 3. Спарсить response body в json.",
							"const jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"const reqData = pm.request.url.query.toObject()",
							"let reqName = reqData.name;",
							"let reqAge = reqData.age;",
							"let reqSalary = reqData.salary;",
							"",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"pm.test(\"'respName' is equal to 'reqName'\", function () {",
							"    pm.expect(jsonData.name).to.eql(reqName);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age в request (age забрать из request.)",
							"pm.test(\"'respAge' is equal to 'reqAge'\", function () {",
							"    pm.expect(jsonData.age).to.eql(reqAge);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary в request (salary забрать из request.)",
							"pm.test(\"'respSalary' is equal to 'reqSalary'\", function () {",
							"    pm.expect(jsonData.salary).to.eql(Number(reqSalary));",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"let respFamily = jsonData.family;",
							"console.log( respFamily);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"let dogProp = jsonData.family.pets.dog;",
							"pm.test(\"'dog' has 'name' parameter\", function () {",
							"    pm.expect(dogProp).to.have.ownProperty(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"'dog' has 'age' parameter\", function () {",
							"    pm.expect(dogProp).to.have.ownProperty(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"'name' is equal to 'Luky'\", function () {",
							"    pm.expect(dogProp.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"'age' is equal to '4'\", function () {",
							"    pm.expect(dogProp.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_3?name=Veronika&age=25&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Veronika"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос",
							"// 2. Статус код 200",
							"",
							"// 3. Спарсить response body в json",
							"const jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"const reqData = pm.request.url.query.toObject()",
							"let reqName = reqData.name;",
							"let reqAge = reqData.age;",
							"let reqSalary = reqData.salary;",
							"",
							"// 5. Проверить, что name в ответе равно name в request (name забрать из request.)",
							"pm.test(\"'respName' is equal to 'reqName'\", function () {",
							"     pm.expect(jsonData.name).to.eql(reqName);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"'respAge' is equal to 'reqAge'\", function () {",
							"    pm.expect(jsonData.age).to.eql(Number(reqAge));",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request",
							"console.log(\"reqSalary = \", reqSalary); ",
							"",
							"// 8. Вывести в консоль параметр salary из response",
							"let respSalary = jsonData.salary;",
							"console.log(\"respSalary = \", respSalary);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(respSalary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response",
							"console.log(respSalary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response",
							"console.log(respSalary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"'0' salary element is equal to 'salary'\", function () {",
							"    pm.expect(respSalary[0]).to.eql(Number(reqSalary));",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"'1' salary element is equal to 'salary*2'\", function () {",
							"    pm.expect(respSalary[1]).to.eql(String(Number(reqSalary) * 2));",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"'2' salary element is equal to 'salary*3'\", function () {",
							"    pm.expect(respSalary[2]).to.eql(String(Number(reqSalary) * 3));",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Veronika\");",
							"",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", 25);",
							"",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", 1500);",
							"",
							"// 21. Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary",
							"let arr = respSalary;",
							"for (let i = 0; i < arr.length; i++) {",
							"    console.log(\"salary = \", arr[i]);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5007/object_info_4?name=Veronika&age=25&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Veronika"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в request",
							"// 3. Вставить параметр name из окружения в request",
							"// 4. Отправить запрос",
							"// 5. Статус код 200",
							"",
							"// 6. Спарсить response body в json.",
							"const jsonData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"const req = request.data;",
							"let reqSalary = req.salary;",
							"let reqAge = req.age;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Body has 'start_qa_salary' parameter\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Body has 'qa_salary_after_6_months' parameter\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Body has 'qa_salary_after_12_months' parameter\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Body has 'qa_salary_after_1.5_year' parameter\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Body has 'qa_salary_after_3.5_years' parameter\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Body has 'person' parameter\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"'start_qa_salary' is equal to 'salary'\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(pm.environment.get(\"salary\"));",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"'qa_salary_after_6_months' is equal to 'salary*2'\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(pm.environment.get(\"salary\") * 2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"'qa_salary_after_12_months' is equal to 'salary*2.7'\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(pm.environment.get(\"salary\") * 2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"'qa_salary_after_1.5_year' is equal to 'salary*3.3'\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(pm.environment.get(\"salary\") * 3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"'qa_salary_after_3.5_years' is equal to 'salary*3.8' \", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(pm.environment.get(\"salary\") * 3.8);",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"'1' element from 'u_name' is equal to 'salary' \", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(pm.environment.get(\"salary\"));",
							"});",
							"",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"'u_age' is equal to 'age' \", function () {",
							"    pm.expect(jsonData.person.u_age).to.eql(pm.environment.get(\"age\"));",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"'u_salary_5_years' is equal to 'salary*4.2'\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(pm.environment.get(\"salary\") * 4.2);",
							"});",
							"",
							"// 22. ***Написать цикл, который выведет в консоль по порядку элементы списка из параметра person.",
							"let arr = jsonData.person.u_name",
							"for (let i = 0; i < arr.length; i++) {",
							"    console.log(\"person.u_name = \", arr[i]);",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name ",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
